# cmake requirements
cmake_minimum_required(VERSION 3.0)
if(COMMAND cmake_policy)
	cmake_policy(SET CMP0054 NEW)
endif(COMMAND cmake_policy)

# Build options have to be before PROJECT(...)
SET(CMAKE_CONFIGURATION_TYPES "Debug;Release" CACHE PATH "Configuration types")
SET(CMAKE_BUILD_TYPE "Release" CACHE PATH "Current build configuration")

# Unix Linux/Apple
if (UNIX)
	# Set the install directory.
	SET(CMAKE_INSTALL_PREFIX /usr CACHE PATH "Installation prefix")
endif()

# CodingRampage
PROJECT(CodingRampage)

# Folders
SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)

# Project parent directory
GET_FILENAME_COMPONENT(RAMPAGE_PROJECT_PARENT .. ABSOLUTE CACHE INTERNAL "Path prefix for the project parent")

# Project root directory
GET_FILENAME_COMPONENT(RAMPAGE_PROJECT_ROOT . ABSOLUTE CACHE INTERNAL "Path prefix for the project")

# Set the path where other thing should be relative to
GET_FILENAME_COMPONENT(CMAKE_SOURCE_DIR . ABSOLUTE CACHE INTERNAL "")

# Project CMake modules directory
SET(RAMPAGE_PROJECT_CMAKE_MODULES "${RAMPAGE_PROJECT_ROOT}/cmake" CACHE PATH "CMake module directory")

# Project CMake modules directory
SET(RAMPAGE_PROJECT_DOCS "${RAMPAGE_PROJECT_ROOT}/docs" CACHE PATH "Documentation directory")

# Project packages directory
SET(RAMPAGE_PROJECT_PACKAGES "${RAMPAGE_PROJECT_ROOT}/packages" CACHE PATH "Package directory")

# Architecture
if(CMAKE_SIZEOF_VOID_P EQUAL 8)
	SET(X86_64 1)
	MESSAGE("Architecture x86 64 bit")
else(CMAKE_SIZEOF_VOID_P EQUAL 8)
	SET(X86_32 1)
	MESSAGE("Architecture x86 32 bit")
endif(CMAKE_SIZEOF_VOID_P EQUAL 8)

# Windows 32/64 bit
if (WIN32)
	if(X86_64)
		SET(PROGRAM_FILES $ENV{ProgramW6432})
	else(X86_64)
		SET(PROGRAM_FILES $ENV{ProgramFiles})
	endif(X86_64)
	
	# Build options
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4221 /wd4251 /wd4275")
	SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Ox")
	SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /bigobj")
	SET(CMAKE_DLL_EXPORT_FLAGS "/DRAMPAGE_LIBRARY_DECLDIR_EXPORT")
	
	# Library settings
	option(RAMPAGE_DYNAMIC_LIBS "Build dynamic library versions" NO)
	mark_as_advanced(RAMPAGE_DYNAMIC_LIBS)

	# Set the install directory.
	SET(CMAKE_INSTALL_PREFIX "${PROGRAM_FILES}" CACHE PATH "Installation prefix")

	# Output
	SET(OUTPUT_DIRECTORY_POSTFIX "")

	# OpenMP
	FIND_PACKAGE(OpenMP)
	if (OPENMP_FOUND)
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
	endif()	
	
# Unix Linux/Apple
elseif (UNIX)
	# Library settings
	if (APPLE)
		option(RAMPAGE_DYNAMIC_LIBS "Build dynamic library versions" NO)
	else(APPLE)
		option(RAMPAGE_DYNAMIC_LIBS "Build dynamic library versions" YES)
	endif()
	mark_as_advanced(RAMPAGE_DYNAMIC_LIBS)

	# Build options
	if(X86_64)
		if (APPLE)
			SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DLINUX -Dlinux -DLINUX64 -D__x86_64__ -DNX64 -Wno-error=c++11-narrowing -Wno-deprecated-declarations -std=c++0x")
		else(APPLE)
			SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DLINUX -Dlinux -DLINUX64 -D__x86_64__ -DNX64 -Wno-deprecated-declarations -std=c++0x")
		endif()
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DLINUX -Dlinux -DLINUX64 -D__x86_64__ -DNX64 -Wno-deprecated-declarations")
	else(X86_64)
		if (APPLE)
			SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DLINUX -Dlinux -DLINUX32 -m32 -Di386 -DNX32 -Wno-error=c++11-narrowing -Wno-deprecated-declarations -std=c++0x")
		else(APPLE)
			SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DLINUX -Dlinux -DLINUX32 -m32 -Di386 -DNX32 -Wno-deprecated-declarations -std=c++0x")		
		endif()
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DLINUX -Dlinux -DLINUX32 -m32 -Di386 -DNX32 -Wno-deprecated-declarations")
	endif(X86_64)
	
	SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3")
	
	if(RAMPAGE_DYNAMIC_LIBS)
	else(RAMPAGE_DYNAMIC_LIBS)
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
	endif(RAMPAGE_DYNAMIC_LIBS)
	
	SET(CMAKE_DLL_EXPORT_FLAGS "-DNOT_USED_IN_LINUX")

	# Set the install directory.
	#SET(CMAKE_INSTALL_PREFIX /usr CACHE PATH "Installation prefix")

	# Output
	SET(OUTPUT_DIRECTORY_POSTFIX "")

	# OpenMP
	FIND_PACKAGE(OpenMP)
	if (OPENMP_FOUND)
		SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
		SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
	endif()	
	# This variable should be used to remove packages we don't want into the catkinised env
	# or the ones that do not compile.
	OPTION(ROS_CATKIN_ENV "Compile under ROS" OFF)
	if (ROS_CATKIN_ENV)
	  FIND_PACKAGE(catkin REQUIRED)
	  catkin_metapackage()	
	  # Reset the project parent directory to point to the catkin workspace
	  SET(CATKIN_WS $ENV{HOME}/catkin_ws)
	  SET(RAMPAGE_PROJECT_PARENT ${CATKIN_WS}/devel)
	endif(ROS_CATKIN_ENV)
endif()

###############################################################################

# Traget names
SET(CMAKE_RELEASE_POSTFIX "" CACHE PATH "Release postfix")
mark_as_advanced(CMAKE_RELEASE_POSTFIX)
SET(CMAKE_DEBUG_POSTFIX "DEBUG" CACHE PATH "Debug postfix")
mark_as_advanced(CMAKE_DEBUG_POSTFIX)

# Executable output directory
SET(RUNTIME_OUTPUT_DIRECTORY ${RAMPAGE_PROJECT_PARENT}/bin${OUTPUT_DIRECTORY_POSTFIX} CACHE PATH "Executable output directory")
mark_as_advanced(RUNTIME_OUTPUT_DIRECTORY)

# Dynamic library output directory
SET(LIBRARY_OUTPUT_DIRECTORY ${RAMPAGE_PROJECT_PARENT}/bin${OUTPUT_DIRECTORY_POSTFIX} CACHE PATH "Dynamic library output directory")
mark_as_advanced(LIBRARY_OUTPUT_DIRECTORY)

# Static library output directory
SET(ARCHIVE_OUTPUT_DIRECTORY ${RAMPAGE_PROJECT_PARENT}/lib${OUTPUT_DIRECTORY_POSTFIX} CACHE PATH "Static library output directory")
mark_as_advanced(ARCHIVE_OUTPUT_DIRECTORY)

SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${RUNTIME_OUTPUT_DIRECTORY})
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${LIBRARY_OUTPUT_DIRECTORY})
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${ARCHIVE_OUTPUT_DIRECTORY})
foreach(CONFIGURATION_TYPE ${CMAKE_CONFIGURATION_TYPES})
	string(TOUPPER ${CONFIGURATION_TYPE} CONFIGURATION_TYPE)
	SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${CONFIGURATION_TYPE} ${RUNTIME_OUTPUT_DIRECTORY})
	SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${CONFIGURATION_TYPE} ${LIBRARY_OUTPUT_DIRECTORY})
	SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${CONFIGURATION_TYPE} ${ARCHIVE_OUTPUT_DIRECTORY})
endforeach(CONFIGURATION_TYPE CMAKE_CONFIGURATION_TYPES)

option(RAMPAGE_POST_BUILD_COPY_FILES "Copy resource files after build" YES)
mark_as_advanced(RAMPAGE_POST_BUILD_COPY_FILES)

###############################################################################
# Packages

MACRO(COPY_FILES TAR DST)
	if(RAMPAGE_POST_BUILD_COPY_FILES)
		foreach(SRC ${ARGN})
			add_custom_command(TARGET ${TAR} POST_BUILD COMMAND ${CMAKE_COMMAND} -DSRC="${SRC}" -DDST="${DST}" -P "${RAMPAGE_PROJECT_CMAKE_MODULES}/copy.cmake")
		endforeach(SRC)
	endif(RAMPAGE_POST_BUILD_COPY_FILES)
ENDMACRO()

MACRO(SUBDIR_LIST OUT INP)
	FILE(GLOB SUB_DIRS RELATIVE ${INP} "${INP}/*")
	SET(OUT "")
	FOREACH(SUB_DIR ${SUB_DIRS})
		IF(IS_DIRECTORY "${INP}/${SUB_DIR}")
			LIST(APPEND ${OUT} "${SUB_DIR}")
		ENDIF()
	ENDFOREACH()
ENDMACRO()

FUNCTION(PACKAGE_LIST PACKAGE_ROOT)
	SET(DIRS "")
	SUBDIR_LIST(DIRS "${RAMPAGE_PROJECT_PACKAGES}/${PACKAGE_ROOT}")
	FOREACH(DIR ${DIRS})
		IF(EXISTS "${RAMPAGE_PROJECT_PACKAGES}/${PACKAGE_ROOT}/${DIR}/CMakeLists.txt")
			IF("${PACKAGE_ROOT}" STREQUAL "")
				MESSAGE(STATUS "Package: ${DIR}")
			ELSE()
				MESSAGE(STATUS "Package: ${PACKAGE_ROOT}/${DIR}")
			ENDIF()
			ADD_SUBDIRECTORY("${RAMPAGE_PROJECT_PACKAGES}/${PACKAGE_ROOT}/${DIR}")
		ENDIF()
	ENDFOREACH()
ENDFUNCTION()

###############################################################################
#
# Packaging
#
###############################################################################

OPTION(CPACK_BUILD_CORE "RAMPAGE Core" ON)

###############################################################################
#
# RAMPAGE packages
#
###############################################################################

PACKAGE_LIST("")

###############################################################################
#
# Packaging
#
###############################################################################

# Windows 32/64 bit
if (WIN32)
	OPTION(CPACK_USE_PACKAGE_SH "Build shell-installable package (.sh)." OFF)
	OPTION(CPACK_USE_PACKAGE_TGZ "Build gziped tarball (.tar.gz)." OFF)
	OPTION(CPACK_USE_PACKAGE_TBZ2 "Build bzip2'd tarball (.tar.bz2)." OFF)
	OPTION(CPACK_USE_PACKAGE_DEB "Build DEB package (.deb)." OFF)
	OPTION(CPACK_USE_PACKAGE_RPM "Build RPM package (.rpm)." OFF)
	OPTION(CPACK_USE_PACKAGE_NSIS "Build NSIS package (.exe)." ON)
# Unix Linux/Apple
elseif (UNIX)
	OPTION(CPACK_USE_PACKAGE_SH "Build shell-installable package (.sh)." OFF)
	OPTION(CPACK_USE_PACKAGE_TGZ "Build gziped tarball (.tar.gz)." OFF)
	OPTION(CPACK_USE_PACKAGE_TBZ2 "Build bzip2'd tarball (.tar.bz2)." OFF)
	OPTION(CPACK_USE_PACKAGE_DEB "Build DEB package (.deb)." ON)
	OPTION(CPACK_USE_PACKAGE_RPM "Build RPM package (.rpm)." OFF)
	OPTION(CPACK_USE_PACKAGE_NSIS "Build NSIS package (.exe)." OFF)
endif()

if (CPACK_USE_PACKAGE_SH OR CPACK_USE_PACKAGE_TGZ OR CPACK_USE_PACKAGE_TBZ2 OR CPACK_USE_PACKAGE_DEB OR CPACK_USE_PACKAGE_RPM OR CPACK_USE_PACKAGE_NSIS)
	# components
	
	if (CPACK_BUILD_CORE)
		SET(CPACK_COMPONENT_CORE_LIBS_DISPLAY_NAME "C++ libraries")
		SET(CPACK_COMPONENT_CORE_HEADERS_DISPLAY_NAME "C++ headers")
		#SET(CPACK_COMPONENT_CORE_EXECS_DISPLAY_NAME "Executables")
		#SET(CPACK_COMPONENT_CORE_CONFIGS_DISPLAY_NAME "Configuration files")
		SET(CPACK_COMPONENT_CORE_LIBS_DESCRIPTION "RAMPAGE Core C++ libraries")
		SET(CPACK_COMPONENT_CORE_HEADERS_DESCRIPTION "RAMPAGE Core C++ headers")
		#SET(CPACK_COMPONENT_CORE_EXECS_DESCRIPTION "RAMPAGE Core Executables")
		#SET(CPACK_COMPONENT_CORE_CONFIGS_DESCRIPTION "RAMPAGE Core Configuration files")
		SET(CPACK_COMPONENT_CORE_LIBS_GROUP "Core")
		SET(CPACK_COMPONENT_CORE_HEADERS_GROUP "Core")
		#SET(CPACK_COMPONENT_CORE_EXECS_GROUP "Core")
		#SET(CPACK_COMPONENT_CORE_CONFIGS_GROUP "Core")
		SET(CPACK_COMPONENT_GROUP_CORE_DESCRIPTION "RAMPAGE Core libraries")

		SET(CPACK_COMPONENT_CTRL_LIBS_DISPLAY_NAME "C++ libraries")
		SET(CPACK_COMPONENT_CTRL_HEADERS_DISPLAY_NAME "C++ headers")
		SET(CPACK_COMPONENT_CTRL_EXECS_DISPLAY_NAME "Executables")
		SET(CPACK_COMPONENT_CTRL_CONFIGS_DISPLAY_NAME "Configuration files")
		SET(CPACK_COMPONENT_CTRL_LIBS_DESCRIPTION "RAMPAGE Controller C++ libraries")
		SET(CPACK_COMPONENT_CTRL_HEADERS_DESCRIPTION "RAMPAGE Controller C++ headers")
		SET(CPACK_COMPONENT_CTRL_EXECS_DESCRIPTION "RAMPAGE Controller executables")
		SET(CPACK_COMPONENT_CTRL_CONFIGS_DESCRIPTION "RAMPAGE Controller configuration files")
		SET(CPACK_COMPONENT_CTRL_LIBS_GROUP "Controllers")
		SET(CPACK_COMPONENT_CTRL_HEADERS_GROUP "Controllers")
		SET(CPACK_COMPONENT_CTRL_EXECS_GROUP "Controllers")
		SET(CPACK_COMPONENT_CTRL_CONFIGS_GROUP "Controllers")
		SET(CPACK_COMPONENT_GROUP_CONTROLLER_DESCRIPTION "RAMPAGE Controllers")

		SET(CPACK_COMPONENT_PLANNER_LIBS_DISPLAY_NAME "C++ libraries")
		SET(CPACK_COMPONENT_PLANNER_HEADERS_DISPLAY_NAME "C++ headers")
		SET(CPACK_COMPONENT_PLANNER_EXECS_DISPLAY_NAME "Executables")
		SET(CPACK_COMPONENT_PLANNER_CONFIGS_DISPLAY_NAME "Configuration files")
		SET(CPACK_COMPONENT_PLANNER_LIBS_DESCRIPTION "RAMPAGE Planner C++ libraries")
		SET(CPACK_COMPONENT_PLANNER_HEADERS_DESCRIPTION "RAMPAGE Planner C++ headers")
		SET(CPACK_COMPONENT_PLANNER_EXECS_DESCRIPTION "RAMPAGE Planner executables")
		SET(CPACK_COMPONENT_PLANNER_CONFIGS_DESCRIPTION "RAMPAGE Planner configuration files")
		SET(CPACK_COMPONENT_PLANNER_LIBS_GROUP "Planners")
		SET(CPACK_COMPONENT_PLANNER_HEADERS_GROUP "Planners")
		SET(CPACK_COMPONENT_PLANNER_EXECS_GROUP "Planners")
		SET(CPACK_COMPONENT_PLANNER_CONFIGS_GROUP "Planners")
		SET(CPACK_COMPONENT_GROUP_PLANNER_DESCRIPTION "RAMPAGE Planners")

		#SET(CPACK_COMPONENT_DATA_LIBS_DISPLAY_NAME "C++ libraries")
		SET(CPACK_COMPONENT_DATA_HEADERS_DISPLAY_NAME "C++ headers")
		SET(CPACK_COMPONENT_DATA_EXECS_DISPLAY_NAME "Executables")
		SET(CPACK_COMPONENT_DATA_CONFIGS_DISPLAY_NAME "Configuration files")
		#SET(CPACK_COMPONENT_DATA_LIBS_DESCRIPTION "RAMPAGE Data C++ libraries")
		SET(CPACK_COMPONENT_DATA_HEADERS_DESCRIPTION "RAMPAGE Data C++ headers")
		SET(CPACK_COMPONENT_DATA_EXECS_DESCRIPTION "RAMPAGE Data executables")
		SET(CPACK_COMPONENT_DATA_CONFIGS_DESCRIPTION "RAMPAGE Data configuration files")
		#SET(CPACK_COMPONENT_DATA_LIBS_GROUP "Data")
		SET(CPACK_COMPONENT_DATA_HEADERS_GROUP "Data")
		SET(CPACK_COMPONENT_DATA_EXECS_GROUP "Data")
		SET(CPACK_COMPONENT_DATA_CONFIGS_GROUP "Data")
		SET(CPACK_COMPONENT_GROUP_DATA_DESCRIPTION "RAMPAGE Data plugins")
		
		#SET(CPACK_COMPONENT_SENSOR_LIBS_DISPLAY_NAME "C++ libraries")
		SET(CPACK_COMPONENT_SENSOR_HEADERS_DISPLAY_NAME "C++ headers")
		SET(CPACK_COMPONENT_SENSOR_EXECS_DISPLAY_NAME "Executables")
		SET(CPACK_COMPONENT_SENSOR_CONFIGS_DISPLAY_NAME "Configuration files")
		#SET(CPACK_COMPONENT_SENSOR_LIBS_DESCRIPTION "RAMPAGE Sensor C++ libraries")
		SET(CPACK_COMPONENT_SENSOR_HEADERS_DESCRIPTION "RAMPAGE Sensor C++ headers")
		SET(CPACK_COMPONENT_SENSOR_EXECS_DESCRIPTION "RAMPAGE Sensor executables")
		SET(CPACK_COMPONENT_SENSOR_CONFIGS_DESCRIPTION "RAMPAGE Sensor configuration files")
		#SET(CPACK_COMPONENT_SENSOR_LIBS_GROUP "Sensors")
		SET(CPACK_COMPONENT_SENSOR_HEADERS_GROUP "Sensors")
		SET(CPACK_COMPONENT_SENSOR_EXECS_GROUP "Sensors")
		SET(CPACK_COMPONENT_SENSOR_CONFIGS_GROUP "Sensors")
		SET(CPACK_COMPONENT_GROUP_SENSOR_DESCRIPTION "RAMPAGE Sensor plugins")
		
		SET(CPACK_COMPONENT_ACTIVECTRL_LIBS_DISPLAY_NAME "C++ libraries")
		SET(CPACK_COMPONENT_ACTIVECTRL_HEADERS_DISPLAY_NAME "C++ headers")
		SET(CPACK_COMPONENT_ACTIVECTRL_EXECS_DISPLAY_NAME "Executables")
		SET(CPACK_COMPONENT_ACTIVECTRL_CONFIGS_DISPLAY_NAME "Configuration files")
		SET(CPACK_COMPONENT_ACTIVECTRL_LIBS_DESCRIPTION "RAMPAGE Active Controller C++ libraries")
		SET(CPACK_COMPONENT_ACTIVECTRL_HEADERS_DESCRIPTION "RAMPAGE Active Controller C++ headers")
		SET(CPACK_COMPONENT_ACTIVECTRL_EXECS_DESCRIPTION "RAMPAGE Active Controller executables")
		SET(CPACK_COMPONENT_ACTIVECTRL_CONFIGS_DESCRIPTION "RAMPAGE Active Controller configuration files")
		SET(CPACK_COMPONENT_ACTIVECTRL_LIBS_GROUP "Active Controllers")
		SET(CPACK_COMPONENT_ACTIVECTRL_HEADERS_GROUP "Active Controllers")
		SET(CPACK_COMPONENT_ACTIVECTRL_EXECS_GROUP "Active Controllers")
		SET(CPACK_COMPONENT_ACTIVECTRL_CONFIGS_GROUP "Active Controllers")
		SET(CPACK_COMPONENT_GROUP_ACTIVECTRL_DESCRIPTION "RAMPAGE Active Controller plugins")
		
		SET(CPACK_COMPONENT_APP_LIBS_DISPLAY_NAME "C++ libraries")
		SET(CPACK_COMPONENT_APP_HEADERS_DISPLAY_NAME "C++ headers")
		SET(CPACK_COMPONENT_APP_SOURCES_DISPLAY_NAME "C++ sources")
		SET(CPACK_COMPONENT_APP_EXECS_DISPLAY_NAME "Executables")
		SET(CPACK_COMPONENT_APP_CONFIGS_DISPLAY_NAME "Configuration files")
		SET(CPACK_COMPONENT_APP_LIBS_DESCRIPTION "RAMPAGE App C++ libraries")
		SET(CPACK_COMPONENT_APP_HEADERS_DESCRIPTION "RAMPAGE App C++ headers")
		SET(CPACK_COMPONENT_APP_SOURCES_DESCRIPTION "RAMPAGE App C++ sources")
		SET(CPACK_COMPONENT_APP_EXECS_DESCRIPTION "RAMPAGE App executables")
		SET(CPACK_COMPONENT_APP_CONFIGS_DESCRIPTION "RAMPAGE App configuration files")
		SET(CPACK_COMPONENT_APP_LIBS_GROUP "App")
		SET(CPACK_COMPONENT_APP_HEADERS_GROUP "App")
		SET(CPACK_COMPONENT_APP_SOURCES_GROUP "App")
		SET(CPACK_COMPONENT_APP_EXECS_GROUP "App")
		SET(CPACK_COMPONENT_APP_CONFIGS_GROUP "App")
		SET(CPACK_COMPONENT_GROUP_APP_DESCRIPTION "RAMPAGE Appnstrations")
	endif(CPACK_BUILD_CORE)

	if (CPACK_BUILD_PHYS)
		SET(CPACK_COMPONENT_PHYS_LIBS_DISPLAY_NAME "C++ libraries")
		SET(CPACK_COMPONENT_PHYS_HEADERS_DISPLAY_NAME "C++ headers")
		SET(CPACK_COMPONENT_PHYS_SOURCES_DISPLAY_NAME "C++ sources")
		SET(CPACK_COMPONENT_PHYS_EXECS_DISPLAY_NAME "Executables")
		SET(CPACK_COMPONENT_PHYS_CONFIGS_DISPLAY_NAME "Configuration files")
		SET(CPACK_COMPONENT_PHYS_LIBS_DESCRIPTION "RAMPAGE Phys physics simulator C++ libraries")
		SET(CPACK_COMPONENT_PHYS_HEADERS_DESCRIPTION "RAMPAGE Phys physics simulator C++ headers")
		SET(CPACK_COMPONENT_PHYS_SOURCES_DESCRIPTION "RAMPAGE Phys physics simulator C++ sources")
		SET(CPACK_COMPONENT_PHYS_EXECS_DESCRIPTION "RAMPAGE Phys physics simulator executables")
		SET(CPACK_COMPONENT_PHYS_CONFIGS_DESCRIPTION "RAMPAGE Phys physics simulator configuration files")
		SET(CPACK_COMPONENT_PHYS_LIBS_GROUP "Phys")
		SET(CPACK_COMPONENT_PHYS_HEADERS_GROUP "Phys")
		SET(CPACK_COMPONENT_PHYS_SOURCES_GROUP "Phys")
		SET(CPACK_COMPONENT_PHYS_EXECS_GROUP "Phys")
		SET(CPACK_COMPONENT_PHYS_CONFIGS_GROUP "Phys")
		SET(CPACK_COMPONENT_GROUP_PHYS_DESCRIPTION "RAMPAGE Phys physics simulator")
	endif(CPACK_BUILD_PHYS)

	if (CPACK_BUILD_TINY)
		SET(CPACK_COMPONENT_TINY_LIBS_DISPLAY_NAME "C++ libraries")
		SET(CPACK_COMPONENT_TINY_HEADERS_DISPLAY_NAME "C++ headers")
		SET(CPACK_COMPONENT_TINY_SOURCES_DISPLAY_NAME "C++ sources")
		SET(CPACK_COMPONENT_TINY_EXECS_DISPLAY_NAME "Executables")
		SET(CPACK_COMPONENT_TINY_CONFIGS_DISPLAY_NAME "Configuration files")
		SET(CPACK_COMPONENT_TINY_LIBS_DESCRIPTION "RAMPAGE Tiny API C++ libraries")
		SET(CPACK_COMPONENT_TINY_HEADERS_DESCRIPTION "RAMPAGE Tiny API C++ headers")
		SET(CPACK_COMPONENT_TINY_SOURCES_DESCRIPTION "RAMPAGE Tiny API C++ sources")
		SET(CPACK_COMPONENT_TINY_EXECS_DESCRIPTION "RAMPAGE Tiny API executables")
		SET(CPACK_COMPONENT_TINY_CONFIGS_DESCRIPTION "RAMPAGE Tiny API configuration files")
		SET(CPACK_COMPONENT_TINY_LIBS_GROUP "Tiny")
		SET(CPACK_COMPONENT_TINY_HEADERS_GROUP "Tiny")
		SET(CPACK_COMPONENT_TINY_SOURCES_GROUP "Tiny")
		SET(CPACK_COMPONENT_TINY_EXECS_GROUP "Tiny")
		SET(CPACK_COMPONENT_TINY_CONFIGS_GROUP "Tiny")
		SET(CPACK_COMPONENT_GROUP_TINY_DESCRIPTION "RAMPAGE Tiny API")
	endif(CPACK_BUILD_TINY)

	# install types
	SET(CPACK_ALL_INSTALL_TYPES Complete Developer)
	
	if (CPACK_BUILD_CORE)
		SET(CPACK_COMPONENT_CORE_LIBS_INSTALL_TYPES Complete Developer)
		SET(CPACK_COMPONENT_CORE_HEADERS_INSTALL_TYPES Complete Developer)
		#SET(CPACK_COMPONENT_CORE_EXECS_INSTALL_TYPES Complete)
		#SET(CPACK_COMPONENT_CORE_CONFIGS_INSTALL_TYPES Complete Developer)
	
		SET(CPACK_COMPONENT_CTRL_LIBS_INSTALL_TYPES Complete Developer)
		SET(CPACK_COMPONENT_CTRL_HEADERS_INSTALL_TYPES Complete Developer)
		SET(CPACK_COMPONENT_CTRL_EXECS_INSTALL_TYPES Complete Developer)
		SET(CPACK_COMPONENT_CTRL_CONFIGS_INSTALL_TYPES Complete Developer)

		SET(CPACK_COMPONENT_PLANNER_LIBS_INSTALL_TYPES Complete Developer)
		SET(CPACK_COMPONENT_PLANNER_HEADERS_INSTALL_TYPES Complete Developer)
		SET(CPACK_COMPONENT_PLANNER_EXECS_INSTALL_TYPES Complete Developer)
		SET(CPACK_COMPONENT_PLANNER_CONFIGS_INSTALL_TYPES Complete Developer)

		#SET(CPACK_COMPONENT_DATA_LIBS_INSTALL_TYPES Complete Developer)
		SET(CPACK_COMPONENT_DATA_HEADERS_INSTALL_TYPES Complete Developer)
		SET(CPACK_COMPONENT_DATA_EXECS_INSTALL_TYPES Complete Developer)
		SET(CPACK_COMPONENT_DATA_CONFIGS_INSTALL_TYPES Complete Developer)

		#SET(CPACK_COMPONENT_SENSOR_LIBS_INSTALL_TYPES Complete Developer)
		SET(CPACK_COMPONENT_SENSOR_HEADERS_INSTALL_TYPES Complete Developer)
		SET(CPACK_COMPONENT_SENSOR_EXECS_INSTALL_TYPES Complete Developer)
		SET(CPACK_COMPONENT_SENSOR_CONFIGS_INSTALL_TYPES Complete Developer)

		SET(CPACK_COMPONENT_ACTIVECTRL_LIBS_INSTALL_TYPES Complete Developer)
		SET(CPACK_COMPONENT_ACTIVECTRL_HEADERS_INSTALL_TYPES Complete Developer)
		SET(CPACK_COMPONENT_ACTIVECTRL_EXECS_INSTALL_TYPES Complete Developer)
		SET(CPACK_COMPONENT_ACTIVECTRL_CONFIGS_INSTALL_TYPES Complete Developer)
		
		SET(CPACK_COMPONENT_APP_LIBS_INSTALL_TYPES Complete)
		SET(CPACK_COMPONENT_APP_HEADERS_INSTALL_TYPES Complete)
		SET(CPACK_COMPONENT_APP_SOURCES_INSTALL_TYPES Complete)
		SET(CPACK_COMPONENT_APP_EXECS_INSTALL_TYPES Complete)
		SET(CPACK_COMPONENT_APP_CONFIGS_INSTALL_TYPES Complete)
	endif(CPACK_BUILD_CORE)

	if (CPACK_BUILD_PHYS)
		SET(CPACK_COMPONENT_PHYS_LIBS_INSTALL_TYPES Complete Developer)
		SET(CPACK_COMPONENT_PHYS_HEADERS_INSTALL_TYPES Complete Developer)
		SET(CPACK_COMPONENT_PHYS_SOURCES_INSTALL_TYPES Complete Developer)
		SET(CPACK_COMPONENT_PHYS_EXECS_INSTALL_TYPES Complete)
		SET(CPACK_COMPONENT_PHYS_CONFIGS_INSTALL_TYPES Complete Developer)
	endif(CPACK_BUILD_PHYS)

	if (CPACK_BUILD_TINY)
		SET(CPACK_COMPONENT_TINY_LIBS_INSTALL_TYPES Complete Developer)
		SET(CPACK_COMPONENT_TINY_HEADERS_INSTALL_TYPES Complete Developer)
		SET(CPACK_COMPONENT_TINY_SOURCES_INSTALL_TYPES Complete Developer)
		SET(CPACK_COMPONENT_TINY_EXECS_INSTALL_TYPES Complete)
		SET(CPACK_COMPONENT_TINY_CONFIGS_INSTALL_TYPES Complete Developer)
	endif(CPACK_BUILD_TINY)

	# name
	if (CPACK_BUILD_TINY)
		if (CPACK_BUILD_CORE)
			SET(CPACK_PACKAGE_NAME "${PROJECT_NAME}" CACHE STRING "Package name" FORCE)
		else (CPACK_BUILD_CORE)
			SET(CPACK_PACKAGE_NAME "${PROJECT_NAME}Tiny" CACHE STRING "Package name" FORCE)
		endif (CPACK_BUILD_CORE)
	elseif (CPACK_BUILD_PHYS)
		SET(CPACK_PACKAGE_NAME "${PROJECT_NAME}Phys" CACHE STRING "Package name" FORCE)
	elseif (CPACK_BUILD_CORE)
		SET(CPACK_PACKAGE_NAME "${PROJECT_NAME}Core" CACHE STRING "Package name" FORCE)
	endif()
	
	# description
	SET(CPACK_PACKAGE_VENDOR "Claudio Zito")
	SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "C++ framework")
	SET(CPACK_PACKAGE_DESCRIPTION_FILE "${RAMPAGE_PROJECT_ROOT}/Readme.md")
	SET(CPACK_RESOURCE_FILE_LICENSE "${RAMPAGE_PROJECT_ROOT}/License.txt")
	set(CPACK_PACKAGE_CONTACT "Clauudio Zito <claudio.zito.81@gmail.com>")

	# version
	SET(CPACK_PACKAGE_VERSION_MAJOR "1" CACHE STRING "Major version")
	SET(CPACK_PACKAGE_VERSION_MINOR "0" CACHE STRING "Minor version")
	SET(CPACK_PACKAGE_VERSION_PATCH "0" CACHE STRING "Patch version")
	SET(CPACK_PACKAGE_VERSION "${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}")
	
	if (WIN32)
		if(X86_64)
			SET(CPACK_ARCH "x64")
		else(X86_64)
			SET(CPACK_ARCH "x86")
		endif(X86_64)
	elseif (UNIX)
		if(X86_64)
			SET(CPACK_ARCH "amd64")
		else(X86_64)
			SET(CPACK_ARCH "i386")
		endif(X86_64)
		SET(CPACK_PACKAGING_INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}")
	endif ()
	SET(CPACK_PACKAGE_FILE_NAME	"${CPACK_PACKAGE_NAME}-v${CPACK_PACKAGE_VERSION}-${CPACK_ARCH}")
	SET(CPACK_PACKAGE_INSTALL_DIRECTORY "${PROJECT_NAME}")
	
	# Package generators
	if (CPACK_USE_PACKAGE_SH)
		LIST(APPEND CPACK_GENERATOR "STGZ")
	endif ()
	if (CPACK_USE_PACKAGE_TGZ)
		LIST(APPEND CPACK_GENERATOR "TGZ")
	endif ()
	if (CPACK_USE_PACKAGE_TBZ2)
		LIST(APPEND CPACK_GENERATOR "TBZ2")
	endif ()
	if (CPACK_USE_PACKAGE_DEB)
		LIST(APPEND CPACK_GENERATOR "DEB")
		SET(CPACK_DEB_COMPONENT_INSTALL ON)
		SET(CPACK_DEBIAN_PACKAGE_NAME "${CPACK_PACKAGE_NAME}")
		SET(CPACK_DEBIAN_PACKAGE_ARCHITECTURE "${CPACK_ARCH}")
		SET(CPACK_DEBIAN_PACKAGE_SHLIBDEPS ON)
		SET(CPACK_COMPONENTS_ALL_IN_ONE_PACKAGE ON)
	endif ()
	if (CPACK_USE_PACKAGE_RPM)
		LIST(APPEND CPACK_GENERATOR "RPM")
		SET(CPACK_RPM_COMPONENT_INSTALL ON)
		SET(CPACK_RPM_PACKAGE_NAME "${CPACK_PACKAGE_NAME}")
		SET(CPACK_COMPONENTS_ALL_IN_ONE_PACKAGE ON)
	endif ()
	if (CPACK_USE_PACKAGE_NSIS)
		LIST(APPEND CPACK_GENERATOR "NSIS")
		SET(CPACK_NSIS_COMPONENT_INSTALL ON)
		SET(CPACK_NSIS_DISPLAY_NAME "${CPACK_PACKAGE_NAME}")
		SET(CPACK_COMPONENTS_ALL_IN_ONE_PACKAGE ON)
	endif ()

	# CPack
	INCLUDE(CPack)
endif ()

###############################################################################
#
# Doxygen documentation
#
###############################################################################

# first we can indicate the documentation build as an option and set it to ON by default
option(RAMPAGE_BUILD_DOC "Build documentation" ON)

IF(RAMPAGE_BUILD_DOC)
	# check if Doxygen is installed
	FIND_PACKAGE(Doxygen)

	IF (DOXYGEN_FOUND)
		# excluded files
		#MESSAGE("Doxygen exclude patterns: ${DOXYGEN_EXCLUDE_PATTERNS}")

		# set input and output files
		SET(DOXYGEN_IN ${RAMPAGE_PROJECT_ROOT}/Doxyfile)
	
		# request to configure the file
		CONFIGURE_FILE(${DOXYGEN_IN} @ONLY)

		# note the option ALL which allows to build the docs together with the application
		ADD_CUSTOM_TARGET(doc_doxygen ALL
			COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYGEN_IN}
			WORKING_DIRECTORY ${RAMPAGE_PROJECT_ROOT}
			COMMENT "Generating API documentation with Doxygen"
			VERBATIM
		)
	ELSE (DOXYGEN_FOUND)
		MESSAGE("Doxygen need to be installed to generate the doxygen documentation")
	ENDIF (DOXYGEN_FOUND)
ENDIF(RAMPAGE_BUILD_DOC)
